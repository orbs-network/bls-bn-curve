package dkgclient

import (
	//"fmt"
	//"log"
	//"github.com/ethereum/go-ethereum/common"
	//"github.com/ethereum/go-ethereum/ethclient"
)

const ethUrl = "http://127.0.0.1:7545"

type client struct {
	blah bool
}

type Client interface {
	Enroll(done chan bool) bool
	Commit(done chan bool) bool
	Verify(done chan bool) bool
}



func (c *client) Enroll(done chan bool) bool {
	done <- true
	return true
}

func (c *client) Commit(done chan bool) bool {
	done <- true
	return true
}

func (c *client) Verify(done chan bool) bool {
	done <- true
	return true
}




//const q := 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001
//
//type bytes32 [32]byte
//
//
//func join(pk bytes32) uint16 {
//
//}
//
//func commit(senderIndex uint16,  pubCommit, uint256[] prCommit) external
//returns(bool)

//func main() {
//	// Create an IPC based RPC connection to a remote node
//	conn, err := ethclient.Dial("/home/karalabe/.ethereum/testnet/geth.ipc")
//	if err != nil {
//		log.Fatalf("Failed to connect to the Ethereum client: %v", err)
//	}
//	// Instantiate the contract and display its name
//	token, err := NewToken(common.HexToAddress("0x21e6fc92f93c8a1bb41e2be64b4e1f88a54d3576"), conn)
//	if err != nil {
//		log.Fatalf("Failed to instantiate a Token contract: %v", err)
//	}
//	name, err := token.Name(nil)
//	if err != nil {
//		log.Fatalf("Failed to retrieve token name: %v", err)
//	}
//	fmt.Println("Token name:", name)
//}
